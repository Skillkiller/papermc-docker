name: Version test
on:
  workflow_dispatch:

jobs:
  get-versions:
    name: Get all minecraft versions
    runs-on: ubuntu-latest
    outputs:
      mc-versions: ${{steps.get-mc-versions.outputs.mc-versions }}
    steps:
      - name: Get minecraft versions
        id: get-mc-versions
        run: |
          echo "mc-versions=$(curl -s -H 'accept: application/json' -H "User-Agent: ${GITHUB_REPOSITORY,,}" "https://fill.papermc.io/v3/projects/paper/versions" | jq -c '[.versions[] | {id: .version.id, minJava: .version.java.version.minimum}]')" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lowercase repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.REPO }}:latest
          outputs: type=docker,dest=${{ runner.temp }}/myimage.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myimage
          path: ${{ runner.temp }}/myimage.tar
  produce-artifacts:
    runs-on: ubuntu-latest
    needs: [get-versions, build]
    strategy:
      matrix:
        mc-version: ${{ fromJson(needs.get-versions.outputs.mc-versions) }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: ${{ runner.temp }}
      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/myimage.tar
          docker image ls -a
      - name: Define Color
        env:
          MC_VERSION: ${{ matrix.mc-version }}
        run: echo "$MC_VERSION"
