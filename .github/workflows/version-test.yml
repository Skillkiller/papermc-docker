name: Version test
on:
  workflow_dispatch:

jobs:
  get-versions:
    name: Get all minecraft versions
    runs-on: ubuntu-latest
    outputs:
      mc-versions: ${{steps.get-mc-versions.outputs.mc-versions }}
      java-versions: ${{steps.get-mc-versions.outputs.java-versions }}
    steps:
      - name: Get minecraft versions
        id: get-mc-versions
        run: |
          PAPERMC_VERSIONS=$(curl -s -H 'accept: application/json' -H "User-Agent: ${GITHUB_REPOSITORY,,}" "https://fill.papermc.io/v3/projects/paper/versions")
          echo "$PAPERMC_VERSIONS"
          echo "mc-versions=$(echo "$PAPERMC_VERSIONS" | jq -c '[.versions[] | {MC_VERSION: .version.id, JAVA_VERSION: .version.java.version.minimum}]')" >> "$GITHUB_OUTPUT"
          echo "" >> "$GITHUB_OUTPUT"
          echo "java-versions=$(echo "$PAPERMC_VERSIONS" | jq -c '[.versions[].version.java.version.minimum] | sort | unique')" >> "$GITHUB_OUTPUT"
  build-images:
    name: Build docker images
    runs-on: ubuntu-latest
    needs: get-versions
    strategy:
      matrix:
        java-version: ${{ fromJson(needs.get-versions.outputs.java-versions) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lowercase repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.REPO }}:jdk-${{ matrix.java-version }}
          build-args: MINEBASE_IMAGE=jdk-${{ matrix.java-version }}
          outputs: type=docker,dest=${{ runner.temp }}/papermc-jdk-${{ matrix.java-version }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: papermc-jdk-${{ matrix.java-version }}.tar
          path: ${{ runner.temp }}/papermc-jdk-${{ matrix.java-version }}.tar
  produce-artifacts:
    runs-on: ubuntu-latest
    needs: [get-versions, build-images]
    strategy:
      fail-fast: false
      matrix:
        mc-version: ${{ fromJson(needs.get-versions.outputs.mc-versions) }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: papermc-jdk-${{ matrix.mc-version.JAVA_VERSION }}.tar
          path: ${{ runner.temp }}
      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/papermc-jdk-${{ matrix.mc-version.JAVA_VERSION }}.tar
          docker image ls -a
      - name: Lowercase repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}
      - name: Start Minecraft server
        env:
          MC_VERSION: ${{ matrix.mc-version.MC_VERSION }}
          JAVA_VERSION: ${{ matrix.mc-version.JAVA_VERSION }}
        run: |
          TEILSTRING="Starting minecraft server version $MC_VERSION"
          MATCH_LINE=""
          
          while IFS= read -r line; do
              echo "$line"
              if [[ "$line" == *"$TEILSTRING"* ]]; then
                  MATCH_LINE="$line"
                  echo "Versionsnummer gefunden!"
                  break
              fi
          done < <(timeout -k 10 3m docker run --name papermc -e "VERSION=$MC_VERSION" -e "JVM_PARAMS=" ${{ env.REPO }}:jdk-$JAVA_VERSION)

          # Save container logs
          CONTAINER_LOGS_FILE=$(mktemp})
          docker logs papermc > $CONTAINER_LOGS_FILE 2>&1 

          if [[ -n "$MATCH_LINE" ]]; then
              echo ">>> Fehler erkannt: $MATCH_LINE"
          else
              echo ">>> Kein Fehler â€“ Timeout erreicht oder Teilstring nicht gefunden"
          fi